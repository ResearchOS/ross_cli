{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p><code>ross</code> (Research Open Source Software) is a command-line interface (CLI) for installing and sharing data science projects written in any programming language. <code>ross</code> is built on top of <code>pip</code>, <code>git</code>, and <code>github</code>, and is designed to be easy to use and flexible.</p> <p>Each project/package's metadata is stored in a <code>rossproject.toml</code> text file, which is a stripped-down version of the <code>pyproject.toml</code> file used by <code>pip</code>. This file contains information about the project, such as its name, version, author, and dependencies.</p>"},{"location":"#dependencies","title":"Dependencies","text":"<ul> <li>Python</li> <li>Git CLI</li> <li>GitHub account</li> <li><code>gh</code> CLI</li> </ul>"},{"location":"#installation","title":"Installation","text":""},{"location":"#cross-platform","title":"Cross-platform","text":"<p>Using <code>pip</code>, either in the global Python environment or in a project-specific virtual environment: <pre><code># Optional\ncd /path/to/preferred/installation/folder\n</code></pre></p> <pre><code>pip install git+https://github.com/ResearchOS/ross_cli.git\nross cli-init\n</code></pre>"},{"location":"#linuxmacos","title":"Linux/MacOS","text":""},{"location":"#using-homebrew-recommended","title":"Using Homebrew (recommended)","text":"<pre><code>brew tap ResearchOS/ross_cli https://github.com/ResearchOS/ross_cli\nbrew install ross_cli\nross cli-init\n</code></pre>"},{"location":"#manually","title":"Manually","text":"<pre><code># Navigate to where on your computer you want to install the package\n# e.g. ~/ross_cli\ncd /path/to/preferred/installation/folder\n\n# Clone this repository to that folder\ngit clone https://github.com/ResearchOS/ross_cli.git\n\n# Add the `ross` CLI to your shell's rc file (e.g. ~/.bashrc, ~/.zshrc, ~/.bash_profile, etc.)\necho 'export PATH=\"$PATH:/path/to/ross_cli\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Initialize the CLI\nross cli-init\n</code></pre>"},{"location":"#create-a-new-project","title":"Create a new project","text":"<p><pre><code>cd /path/to/your/project/folder\nross init\n</code></pre> Creates the <code>rossproject.toml</code> file in the current directory, and creates a minimal project folder structure.</p>"},{"location":"#tap-an-index","title":"Tap an index","text":"<p>Before installing any packages, you need to <code>tap</code> (add) an index to tell <code>ross</code> where it should be looking for packages. Indexes are GitHub repositories owned by you or someone else that contain an <code>index.toml</code> file. This file contains a list of package names &amp; URL's. <pre><code>ross tap https://github.com/github_user/github_repo\n</code></pre> This clones the repo to your computer at <code>~/.ross/indexes/github_user/github_repo</code> and creates an <code>index.toml</code> file in that directory, if it doesn't already exist.</p>"},{"location":"#create-an-index","title":"Create an index","text":"<p>An index is just a GitHub repository. You can create one by going to GitHub's website and creating a new repository. </p> <p>It is OK if the repository is empty - <code>ross</code> will create the <code>index.toml</code> file for you.</p>"},{"location":"#example-indextoml","title":"Example index.toml","text":"<pre><code>[[package]]\nurl = \"https://github.com/example_user/example_package\"\n</code></pre>"},{"location":"#install-a-package","title":"Install a package","text":"<p><pre><code>ross install example_package\n</code></pre> This will search through all of the tapped indexes for the package name, and <code>pip install --editable git+&lt;url&gt;</code> the package. Installing a package in editable mode allows you to have just as much control over the packages you install as if you had written it yourself.</p>"},{"location":"#release-a-package-optional-requires-gh-cli","title":"Release a package (optional, requires <code>gh</code> CLI)","text":"<p><pre><code>ross release v#.#.#\n</code></pre> This will create a new release of the package using the <code>gh</code> CLI. The version number should be in the format <code>v#.#.#</code>, e.g. <code>v0.1.0</code>. This will use the information from the <code>rossproject.toml</code> file to update the <code>pyproject.toml</code> file, and create a new release on GitHub.</p>"},{"location":"#rossprojecttoml-format-for-releases","title":"rossproject.toml format for releases","text":"<p>To release a package, you need to have a <code>rossproject.toml</code> file in the root of your package's repository. This file should contain the following information: <pre><code>name = \"example_package\"\nversion = \"0.1.0\"\ndescription = \"A short description of the package\"\nlanguage = \"python\"\nauthors = [\n    \"Author1\",\n    \"Author2\"\n]\ndependencies = [\n    \"numpy\",\n    \"pandas\",\n    \"my_other_package\"\n]\n</code></pre> This gets converted to a standard <code>pyproject.toml</code> file when you <code>ross release</code> the package.</p>"},{"location":"#add-your-package-to-an-index","title":"Add your package to an index","text":"<p>After your package's repository has at least one release, you can add it to an index of your choice. This will allow other users to <code>ross install</code> your package. <pre><code>ross add github_user/github_repo\n</code></pre> This command adds the package in the current folder to the <code>index.toml</code> file in <code>github_user/github_repo</code>. It will then <code>git push</code> the changes to the remote repository.</p>"},{"location":"Overview/","title":"ROSS Philosophy","text":""},{"location":"Overview/#data-analysis-code-is-not-reused","title":"Data analysis code is not reused","text":"<p>Data analysis is a crucial part of many fields, from business intelligence to scientific research, and Python is the de facto standard language for data analysis, with a mature ecosystem of packages for nearly any purpose. PyPI (Python Package Index) is the standard repository for publishing Python packages, and <code>pip</code> is the standard tool for installing them. </p> <p>However, PyPI is generally not used for data analyses, and there are many good reasons for not publishing data analyses on PyPI (privacy, burdensome metadata, etc.). Therefore, data analysts are left without a standard way to share their work and utilize the work of others.</p>"},{"location":"Overview/#share-data-analysis-code-using-ross","title":"Share data analysis code using <code>ross</code>","text":"<p><code>ross</code> is a command-line interface (CLI) tool created to fill the gap of reusing data analyses. It provides a simple and private way to publish and install data analyses, making it easy to share and reuse code with minimal overhead. </p> <p>This tool is built with data analysts in mind - people who are generally proficient with coding for data analysis, but may not have experience with software development and creating packages. <code>ross</code> leverages familiar tools (<code>pip</code> and the GitHub CLI), allowing users to leverage the power of code reuse with minimal time spent on the complexities of package management.</p>"},{"location":"Overview/#how-does-ross-work","title":"How does <code>ross</code> work?","text":"<p><code>ross</code> is intended to facilitate reusing data analyses by providing mechanisms for publishing and installation. These analyses could be any meaningful unit of work - a one line script, a series of analyses that form a pipeline, of a complete start to finish data analysis project. <code>ross</code> uses GitHub repositories as (1) a private package index, and (2) a platform for publishing and installing data analyses.</p>"},{"location":"Overview/add_to_index/","title":"Add a Package to an Index","text":"<p>To be able to <code>ross install</code> a package, the package must be added to a <code>ross</code> index.</p> <p>Several criteria must be met for a package to be added to an index:</p> <ol> <li> <p>The index GitHub repository must exist.</p> </li> <li> <p>The package must contain a git repository, and a corresponding GitHub remote repository must exist.</p> </li> <li> <p>The package folder must contain a <code>rossproject.toml</code> file with the minimum required metadata.</p> </li> </ol>"},{"location":"Overview/index_repo/","title":"GitHub Package Indexes","text":"<p>An index is simply a GitHub repository that contains an <code>index.toml</code> file. This file contains a list of package names and their corresponding GitHub repository URLs. The <code>ross</code> CLI uses this index to find and install packages.</p> <p>For example, if a research lab creates a private package index (a GitHub repository that contains an <code>index.toml</code> file), then any member of the lab with access to the repository can <code>ross tap &lt;URL&gt;</code> the index repository. After that, they can directly install packages from it using <code>ross install &lt;package&gt;</code>, similar to <code>pip install &lt;package&gt;</code> for installing packages from PyPI. </p> <p>Note</p> <p>If the index repository is made public, then anyone can tap the index and install packages from it.</p>"},{"location":"Overview/index_repo/#how-to-create-an-index","title":"How to Create an Index","text":"<p>To create an index, you can follow these steps:</p> <ol> <li> <p>Go to GitHub and create a new repository.</p> </li> <li> <p>Name the repository something meaningful, like <code>my_data_analyses_index</code>.</p> </li> <li> <p>You can choose to make the repository public or private, depending on your needs.</p> </li> <li> <p>You can leave the repository empty; <code>ross</code> will create the <code>index.toml</code> file for you when you tap the index.</p> </li> </ol> <p>Note</p> <p>The index repository must be a GitHub repository. No local copy of the repository is necessary.</p>"},{"location":"Overview/index_repo/#example-indextoml","title":"Example <code>index.toml</code>","text":"<pre><code>[[package]]\nname = \"github_repo\"\nurl = \"https://github.com/github_user/github_repo\"\n</code></pre>"},{"location":"Overview/index_repo/#how-to-tap-an-index","title":"How to Tap an Index","text":"<p>To tell the <code>ross</code> tool about this index of packages, it must be tapped. This is similar to how Homebrew manages non-standard package indexes.</p> <p>To tap an index, you can use the <code>ross tap</code> command followed by the URL of the GitHub repository. For example: <pre><code>ross tap https://github.com/github_user/github_repo\n</code></pre> This command adds the index URL to your local <code>ross</code> configuration file. Now, running <code>ross install</code> will search through the tapped indexes for corresponding packages to install.</p>"},{"location":"Overview/install/","title":"Installation","text":"<p>If you know the name of the package you want to install, you can use the <code>ross install &lt;package&gt;</code> command. This will install the package and its dependencies, making it available for use in your project.</p> <pre><code>ross install my-package\n</code></pre>"},{"location":"Overview/release/","title":"Release a Package","text":"<p>To share your package with the world, it must be released. With <code>ross release</code>, you can easily create a GitHub release of your package.</p> <p>Releases can be created for a variety of reasons, such as:</p> <ol> <li> <p>Sharing a stable version of your package with others</p> </li> <li> <p>Fixing bugs or adding features to your data analysis</p> </li> <li> <p>Creating new pipelines or workflows</p> </li> <li> <p>Creating snapshots of an entire data analysis project, for example when submitting to a journal</p> </li> </ol> <p>The metadata for the release is defined in the project's <code>rossproject.toml</code> file: <pre><code>name = \"my-package\"\nversion = \"0.1.0\"\ndescription = \"A brief description of my package\"\nauthors = [\"Your Name\"]\ndependencies = [\"dependency1\", \"dependency2\"]\n</code></pre></p>"},{"location":"Overview/release/#version","title":"Version","text":"<p>When running <code>ross release</code>, you can specify either <code>patch</code>, <code>minor</code>, or <code>major</code> to indicate the type of version bump you want to apply. This will automatically update the version in your <code>rossproject.toml</code> file. If you do not specify a version type, <code>ross</code> will attempt to release the package with the current version.</p>"},{"location":"Overview/release/#message","title":"Message","text":"<p>You can also provide a message for the release. If you do not specify a message, <code>ross</code> will use the default message format: \"Release {version}\". <pre><code>ross release patch -m \"My release message\"\n</code></pre></p>"}]}